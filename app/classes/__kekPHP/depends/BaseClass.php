<?php

/** BaseClass is extended by most kekPHP Classes and is a flexible data structure with prebuilt utilities.
 *
 * BaseClass Instances should be generated by passing @param $array to BaseClass->__construct() where $array is an
 * associative array generated by using $db->get_row() OR $db->get_rows_assoc(). This initialization will automatically
 * assign the values of @param $array to the BaseClass Instance.
 *
 * @example: Initialize BaseClass Instance:
 * ---------------------------------------------------------------------------------------------------------------------
 * $array =
 * [
 *     'id'=>'kek123',
 *     'message'=>'Kappa',
 *     'status'=>'active',
 *     'example_json'=>'{"profile_name":"test_E","engine":"simulation-only"}',
 *     'example_json_array'=>'{"profile_name":"test_E","engine":"simulation-only"}',
 * ];
 *
 * $obj = new BaseClass($array);
 *
 * @code: echo $obj->id;
 * @output: kek123
 *
 * @code: echo $obj->message;
 * @output: Kappa
 *
 * @code: echo $obj->status;
 * @output: active
 * ---------------------------------------------------------------------------------------------------------------------
 *
 * BaseClass Instance Properties can be automatically manipulated using kekPHP Encoding Methods.
 * @see: BaseClass->__construct() Instance Properties Documentation
 *
 * BaseClass Instance Properties can be automatically formatted by creating an Object Method with method name equal to
 * an Object Property. BaseClass will assign the return value of function $key() to $this->$key where $key is an Object
 * Property name.
 *
 * This allows the a BaseClass to automatically assign its own properties using @param $array and then manipulate its
 * property assignments by running all Object Property Methods that match the name of an Object Property. xD
 */
class BaseClass
{
    /* Object ID - All objects should have an ID */
    var $id;

    /** Construct a BaseClass Instance
     * @param $array - Associative Array | Use $db->get_row() OR $db->get_rows_assoc()[$i] to generate $array
     * @example: Standard Initialization using a MySQL Database Row converted to an Associative Array
     * -----------------------------------------------------------------------------------------------------------------
     * $user = $db->get_row("SELECT * FROM users WHERE username='app'")
     * $obj = new BaseClass($user);
     *
     * @code: echo $obj->username;
     * @output: app
     * -----------------------------------------------------------------------------------------------------------------
     *
     * Object Properties that are initialized within the Object Scope prior to __construct() can be assigned a kekPHP
     * keyword to run a kekPHP Encoding Method. This is mainly used to automatically encode/decode database fields
     * that are stored in an encoded format (JSON, for example) and assign the results to the Object Instance
     *
     * kekPHP Predefined Encoding Methods:
     *     1.)       'float' - Run (float)$val on $this->$key               | Typecast to Float
     *     2.)        'int' -  Run (int)$val on $this->$key                 | Typecast to Integer
     *     3.)        'json' - Run json_decode($val) on $this->$key         | JSON decode: Standard
     *     4.)  'json_array' - Run json_decode($val, true) on $this->$key   | JSON decode: Force Associative
     *     5.) 'json_encode' - Run json_encode($val) on $this->$key         | JSON encode: Convert Object to String
     *
     * These Encoding Methods allow for simple automatic encoding/decoding logic that is defined in the Class definition
     * by initializing Object Properties and assigning them the name of an Encoding Method (@see: Instance Properties)
     *
     * Methods in the Object Scope will be automatically run on __construct() if a method name matches an Object
     * Property key. This is called an Object Property Method and is used for automatic formatting of a field upon
     * initialization. This method will be run after kekPHP Encoding methods are run and directly before __construct()
     * is complete, and will assign the return value of the method $this->$key() to $this->$key.
     */
    function __construct($array = [])
    {
        if (empty($array)) {
            return false;
        }

        if (is_string($array)) {
            $array = [$array];
        }

        /*
         * Load $array into $this and Decode/Encode fields where specified
         */
        foreach ($array as $key => $val) {
            if (empty($this->$key)) {
                $this->$key = '';
            }

            if ($this->$key === 'json') {
                $val = json_decode($val);
            } else {
                if ($this->$key === 'json_array') {
                    $val = json_decode($val, true);
                } else {
                    if ($this->$key === 'json_encode') {
                        $val = json_encode($val);
                    } else {
                        if ($this->$key === 'float') {
                            $val = (float)$val;
                        } else {
                            if ($this->$key === 'int') {
                                $val = (int)$val;
                            }
                        }
                    }
                }
            }
            $this->$key = $val;
        }

        /*
         * Generate a list of methods to run on $this (kek_methods)
         */
        $kek_methods = [];
        foreach ($this as $key => $val) {
            if (method_exists($this, $key)) {
                $kek_methods[] = $key;
            }
        }

        /*
         * Finalize Initialization
         * Run $this->kek_methods to assign Object Properties
        */
        foreach (array_reverse($kek_methods) as $method) {
            $this->$method = call_user_func([$this, $method]);
        }
    }

    /** Output an Element using $this and @param $args (./app/elements/*.php)
     * @param $element
     * @param array $args (optional)
     * @return bool
     */
    function __echo($element, $args = [])
    {
        if (empty($args['ext'])) {
            $ext = 'php';
        }
        $args['this'] = $this;
        $element_path = APP_PATH . "elements/$element.$ext";

        if (!file_exists($element_path)) {
            echo __log("Invalid Element: $element");

            return false;
        }

        include($element_path);
    }

    /** Generate (if does not exist) and/or return $this->id
     * @note: kekPHP Property Method
     * @return string
     */
    function id()
    {
        if (!empty($this->id)) {
            return $this->id;
        }

        return generate_mysql_id();
    }

    /** Log a message to the error_log
     * @param string $message
     * @note: kekPHP Property Method
     * @return string
     */
    function log($message)
    {
        $path = LOG_PATH . 'kek.log';
        exec("echo '\n$message' >> $path");

        return true;
    }
}